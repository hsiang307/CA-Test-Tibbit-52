'***********************************************************************************************************
'			Tibbit #52 ( Four Channel ADC with Isolation )
'***********************************************************************************************************
include "global.tbh"

const TBT52_INIT_SIGNATURE=&h1052
const TBT52_STAMP="TBT52>"
const TBT52_CR_LF=chr(13)+chr(10)

const TBT52_FW="V1.31 2016/12/15"

#if TBT52_DEBUG_PRINT=1
	declare sub tbt52_debug_print(data as string)
#endif

declare sub param_read()
declare sub param_write()
declare sub tbt52_delay_msecond(value as word)

dim i2c_num_tbt52 as byte
dim tbt52_init_flag as word
dim tbt52_channel as tbt52_nums

dim tbt52_bit_error_compensation as real(4)

function tbt52_init(use_ssi as no_yes) as ok_ng
' Call this function to initialize the Tibbit.
' Use_ssi argument specifies whether you want to communicate with this Tibbit using the SSI channel running in the I2C mode (YES), or
' go for direct I/O manipulation a.k.a. bit-banging (NO).
' Note that there is a limited number of SSI channels so if you set use_ssi=YES this function may return NG, meaning that
' there are no free SSI channels left. This doesn't mean failure. Rather, it means that comms will proceed in bit banging mood.
	dim i as byte
	dim s as string
	#if TBT52_DEBUG_PRINT=1
		tbt52_debug_print("+++tbt_52_init()+++")
	#endif
	
	tbt52_init=OK

	tbt52_init_flag=TBT52_INIT_SIGNATURE
	i2c_num_tbt52=si2c_register("TBT52", TBT52_DATA_PIN, TBT52_CLK_PIN,use_ssi)

	if i2c_num_tbt52<4 then
		ssi.channel=i2c_num_tbt52
		ssi.enabled=NO
		#IF PLATFORM_ID=TPP2WG2 or PLATFORM_ID=TPP3WG2 or PLATFORM_ID=TPP2G2 or PLATFORM_ID=TPP3G2
			ssi.baudrate=150
		#ELIF PLATFORM_ID=TPP2W or PLATFORM_ID=TPP3W
			ssi.baudrate=110
		#ENDIF
		ssi.clkmap=TBT52_CLK_PIN
		ssi.dimap=TBT52_DATA_PIN
		ssi.domap=TBT52_DATA_PIN
		ssi.direction=PL_SSI_DIRECTION_LEFT
		ssi.mode=PL_SSI_MODE_2
		ssi.zmode=PL_SSI_ZMODE_ENABLED_ON_ZERO
		ssi.enabled=YES
	else
		if use_ssi=YES then
			tbt52_init=NG
		end if
	end if

	io.num=TBT52_MCLR_PIN
	io.enabled=YES
	io.state=LOW
	#IFDEF PLATFORM_TYPE_32
		tbt52_delay_msecond(1)
	#ELSE
		tbt52_delay_msecond(5)
	#ENDIF
	io.state=HIGH

	#IFDEF PLATFORM_TYPE_32
		tbt52_delay_msecond(20)
	#ELSE
		tbt52_delay_msecond(200)
	#ENDIF

	io.num=TBT52_INT_PIN
	io.enabled=NO


	si2c_get(i2c_num_tbt52)

	si2c_start()
	si2c_write(&h20)
	si2c_write(&h03)
	si2c_stop()

	si2c_start()
	si2c_write(&h21)

	s=""
	for i=0 to 14
		s=s+chr(si2c_read(TRUE))
	next i
	s=s+chr(si2c_read(FALSE))

	si2c_stop()

	#if TBT52_DEBUG_PRINT=1
		tbt52_debug_print("F/W : "+s)
	#endif

	if TBT52_FW <> s then
		#if TBT52_DEBUG_PRINT=1
			tbt52_debug_print("F/W incorrect !")
		#endif	
		sys.halt
	end if
	
	for tbt52_channel=ADC_1 to ADC_4
		si2c_start()
		si2c_write(&h20)
		si2c_write(&h02)
		si2c_write(tbt52_channel)
		si2c_write(&h1C)	'single mode + 16 bits +  Gain = 1
		si2c_stop()
		while (io.lineget(TBT52_INT_PIN)=LOW)
		wend
	next tbt52_channel

	param_read()
	#if TBT52_DEBUG_PRINT=1
		tbt52_debug_print("error compensation per bit (ch 1):"+ftostr(tbt52_bit_error_compensation(0),FTOSTR_MODE_AUTO,5))
		tbt52_debug_print("error compensation per bit (ch 2):"+ftostr(tbt52_bit_error_compensation(1),FTOSTR_MODE_AUTO,5))
		tbt52_debug_print("error compensation per bit (ch 3):"+ftostr(tbt52_bit_error_compensation(2),FTOSTR_MODE_AUTO,5))
		tbt52_debug_print("error compensation per bit (ch 4):"+ftostr(tbt52_bit_error_compensation(3),FTOSTR_MODE_AUTO,5))
		tbt52_debug_print("---tbt_52_init()---")
	#endif

end function

sub tbt52_channel_select(channel as tbt52_nums)
' Selects an active ADC channel. Use tbt52_get_volts() for actual conversion.
	tbt52_channel=channel
end sub

function tbt52_get_volts()as real
' Performs ADC conversion for the selected channel and returns PREVIOUS conversion result expressed in mV.
' Select desired channel using tbt52_channel_select() and it will conversion on the previous channel.
	dim i,hi_byte,lo_byte,config as byte
	dim tmp as word
	dim f as no_yes=NO
	const LSB_mV=0.00030517578125
	f=NO
busy_wait:
	si2c_start()
	si2c_write(&h20)
	si2c_write(&h01)
	si2c_write(tbt52_channel)
	si2c_stop()
	while (io.lineget(TBT52_INT_PIN)=LOW)
	wend
	si2c_start()
	si2c_write(&h21)
	hi_byte=si2c_read(TRUE)
	lo_byte=si2c_read(TRUE)
	config=si2c_read(FALSE)
	si2c_stop()

	if (config and &h80) then goto busy_wait

	if f=YES then
		tmp=hi_byte*256
		tmp=tmp+lo_byte
	else
		' start a conversion.
		si2c_start()
		si2c_write(&h20)
		si2c_write(&h02)
		si2c_write(tbt52_channel)
		si2c_write(&h9C)	'single mode + 16 bits +  Gain = 1
		si2c_stop()
		while (io.lineget(TBT52_INT_PIN)=LOW)
		wend
		f=YES
		goto busy_wait
	end if

	'
	' conversion is done!
	'DADA RATE								INPUT SIGNAL
	'			NEGATIVE FULL_SCALE		-1LSB		 ZERO		 +1LSB		POSITIVE FULL_SCALE
	'  8 SPS		&H8000				&HFFFF		&H0000		&H0001			&H7FFF
	' 16 SPS		&HC000				&HFFFF		&H0000		&H0001			&H3FFF
	' 32 SPS		&HE000				&HFFFF		&H0000		&H0001			&H1FFF
	'128 SPS		&HF800				&HFFFF		&H0000		&H0001			&H7FF
	'

	#if TBT52_DEBUG_PRINT=1
		tbt52_debug_print("read: "+hex(tmp))
	#endif

	if tmp<=&h7FFF then
		f=NO
	else
		f=YES
		tmp=&hFFFF-tmp +1
	end if

	tbt52_get_volts=tbt52_bit_error_compensation(tbt52_channel)*tmp
	tbt52_get_volts=tbt52_get_volts/1000000
	tbt52_get_volts=tbt52_get_volts+tmp*LSB_mV
	
	if f=YES then
		tbt52_get_volts=-tbt52_get_volts
	end if
end function

sub tbt52_release()
	if TBT52_INIT_SIGNATURE<>tbt52_init_flag then exit sub
	tbt52_init_flag=&hFFFF
	si2c_release(i2c_num_tbt52)
end sub

sub param_read()
	dim value(4)as byte

	#if PLATFORM_TYPE_32
		dim r,tmp as dword
	#endif

	si2c_get(i2c_num_tbt52)

	si2c_start()
	si2c_write(&h20)
	si2c_write(&h06)
	si2c_stop()
	while (io.lineget(TBT52_INT_PIN)=LOW)
	wend
	si2c_start()
	si2c_write(&h21)

	value(0)=si2c_read(true)
	value(1)=si2c_read(true)
	value(2)=si2c_read(true)
	value(3)=si2c_read(true)

	#if PLATFORM_TYPE_32
		tmp=value(1)*&h10000
		r=tmp
		tmp=value(2)*&h100
		r=r+tmp
		tmp=value(3)
		r=r+tmp
		tbt52_bit_error_compensation(0)=r
		tbt52_bit_error_compensation(0)=tbt52_bit_error_compensation(0)/1000000
	#else
		tbt52_bit_error_compensation(0)=tbt52_bit_error_compensation(0)+value(1)*&h10000
		tbt52_bit_error_compensation(0)=tbt52_bit_error_compensation(0)+value(2)*&h100
		tbt52_bit_error_compensation(0)=tbt52_bit_error_compensation(0)+value(3)
		tbt52_bit_error_compensation(0)=tbt52_bit_error_compensation(0)/1000000
		if value(0) and &h80 then
			value(0)=value(0) and &h7F
			tbt52_bit_error_compensation(0)=tbt52_bit_error_compensation(0)+value(0)*&h1000000
			tbt52_bit_error_compensation(0)=-tbt52_bit_error_compensation(0)
		else
			tbt52_bit_error_compensation(0)=tbt52_bit_error_compensation(0)+value(0)*&h1000000
		end if
	#endif

	if value(0) and &h80 then
		value(0)=value(0) and &h7F
		#if PLATFORM_TYPE_32
			tmp=value(0)*&h1000000
			r=tmp
			tbt52_bit_error_compensation(0)=tbt52_bit_error_compensation(0)+r
			tbt52_bit_error_compensation(0)=-tbt52_bit_error_compensation(0)
		#else
			tbt52_bit_error_compensation(0)=tbt52_bit_error_compensation(0)+value(0)*&h1000000
		#endif
		tbt52_bit_error_compensation(0)=-tbt52_bit_error_compensation(0)
	else
		#if PLATFORM_TYPE_32
			tmp=value(0)*&h1000000
			r=tmp
			tbt52_bit_error_compensation(0)=tbt52_bit_error_compensation(0)+r
		#else
			tbt52_bit_error_compensation(0)=tbt52_bit_error_compensation(0)+value(0)*&h1000000
		#endif
	end if

	value(0)=si2c_read(true)
	value(1)=si2c_read(true)
	value(2)=si2c_read(true)
	value(3)=si2c_read(true)
	#if PLATFORM_TYPE_32
		tmp=value(1)*&h10000
		r=tmp
		tmp=value(2)*&h100
		r=r+tmp
		tmp=value(3)
		r=r+tmp
		tbt52_bit_error_compensation(1)=r
		tbt52_bit_error_compensation(1)=tbt52_bit_error_compensation(1)/1000000
	#else
		tbt52_bit_error_compensation(1)=tbt52_bit_error_compensation(1)+value(1)*&h10000
		tbt52_bit_error_compensation(1)=tbt52_bit_error_compensation(1)+value(2)*&h100
		tbt52_bit_error_compensation(1)=tbt52_bit_error_compensation(1)+value(3)
		tbt52_bit_error_compensation(1)=tbt52_bit_error_compensation(1)/1000000
		if value(0) and &h80 then
			value(0)=value(0) and &h7F
			tbt52_bit_error_compensation(1)=tbt52_bit_error_compensation(1)+value(0)*&h1000000
			tbt52_bit_error_compensation(1)=-tbt52_bit_error_compensation(1)
		else
			tbt52_bit_error_compensation(1)=tbt52_bit_error_compensation(1)+value(0)*&h1000000
		end if
	#endif

	if value(0) and &h80 then
		value(0)=value(0) and &h7F
		#if PLATFORM_TYPE_32
			tmp=value(0)*&h1000000
			r=tmp
			tbt52_bit_error_compensation(1)=tbt52_bit_error_compensation(1)+r
			tbt52_bit_error_compensation(1)=-tbt52_bit_error_compensation(1)
		#else
			tbt52_bit_error_compensation(1)=tbt52_bit_error_compensation(1)+value(0)*&h1000000
		#endif
		tbt52_bit_error_compensation(1)=-tbt52_bit_error_compensation(1)
	else
		#if PLATFORM_TYPE_32
			tmp=value(0)*&h1000000
			r=tmp
			tbt52_bit_error_compensation(1)=tbt52_bit_error_compensation(1)+r
		#else
			tbt52_bit_error_compensation(1)=tbt52_bit_error_compensation(1)+value(0)*&h1000000
		#endif
	end if

	value(0)=si2c_read(true)
	value(1)=si2c_read(true)
	value(2)=si2c_read(true)
	value(3)=si2c_read(true)
	#if PLATFORM_TYPE_32
		tmp=value(1)*&h10000
		r=tmp
		tmp=value(2)*&h100
		r=r+tmp
		tmp=value(3)
		r=r+tmp
		tbt52_bit_error_compensation(2)=r
		tbt52_bit_error_compensation(2)=tbt52_bit_error_compensation(2)/1000000
	#else
		tbt52_bit_error_compensation(2)=tbt52_bit_error_compensation(2)+value(1)*&h10000
		tbt52_bit_error_compensation(2)=tbt52_bit_error_compensation(2)+value(2)*&h100
		tbt52_bit_error_compensation(2)=tbt52_bit_error_compensation(2)+value(3)
		tbt52_bit_error_compensation(2)=tbt52_bit_error_compensation(2)/1000000
		if value(0) and &h80 then
			value(0)=value(0) and &h7F
			tbt52_bit_error_compensation(2)=tbt52_bit_error_compensation(2)+value(0)*&h1000000
			tbt52_bit_error_compensation(2)=-tbt52_bit_error_compensation(2)
		else
			tbt52_bit_error_compensation(2)=tbt52_bit_error_compensation(2)+value(0)*&h1000000
		end if
	#endif

	if value(0) and &h80 then
		value(0)=value(0) and &h7F
		#if PLATFORM_TYPE_32
			tmp=value(0)*&h1000000
			r=tmp
			tbt52_bit_error_compensation(2)=tbt52_bit_error_compensation(2)+r
			tbt52_bit_error_compensation(2)=-tbt52_bit_error_compensation(2)
		#else
			tbt52_bit_error_compensation(2)=tbt52_bit_error_compensation(2)+value(0)*&h1000000
		#endif
		tbt52_bit_error_compensation(2)=-tbt52_bit_error_compensation(2)
	else
		#if PLATFORM_TYPE_32
			tmp=value(0)*&h1000000
			r=tmp
			tbt52_bit_error_compensation(2)=tbt52_bit_error_compensation(2)+r
		#else
			tbt52_bit_error_compensation(2)=tbt52_bit_error_compensation(2)+value(0)*&h1000000
		#endif
	end if

	value(0)=si2c_read(true)
	value(1)=si2c_read(true)
	value(2)=si2c_read(true)
	value(3)=si2c_read(false)
	#if PLATFORM_TYPE_32
		tmp=value(1)*&h10000
		r=tmp
		tmp=value(2)*&h100
		r=r+tmp
		tmp=value(3)
		r=r+tmp
		tbt52_bit_error_compensation(3)=r
		tbt52_bit_error_compensation(3)=tbt52_bit_error_compensation(3)/1000000
	#else
		tbt52_bit_error_compensation(3)=tbt52_bit_error_compensation(3)+value(1)*&h10000
		tbt52_bit_error_compensation(3)=tbt52_bit_error_compensation(3)+value(2)*&h100
		tbt52_bit_error_compensation(3)=tbt52_bit_error_compensation(3)+value(3)
		tbt52_bit_error_compensation(3)=tbt52_bit_error_compensation(3)/1000000
		if value(0) and &h80 then
			value(0)=value(0) and &h7F
			tbt52_bit_error_compensation(3)=tbt52_bit_error_compensation(3)+value(0)*&h1000000
			tbt52_bit_error_compensation(3)=-tbt52_bit_error_compensation(3)
		else
			tbt52_bit_error_compensation(3)=tbt52_bit_error_compensation(3)+value(0)*&h1000000
		end if
	#endif

	if value(0) and &h80 then
		value(0)=value(0) and &h7F
		#if PLATFORM_TYPE_32
			tmp=value(0)*&h1000000
			r=tmp
			tbt52_bit_error_compensation(3)=tbt52_bit_error_compensation(3)+r
			tbt52_bit_error_compensation(3)=-tbt52_bit_error_compensation(3)
		#else
			tbt52_bit_error_compensation(1)=tbt52_bit_error_compensation(1)+value(0)*&h1000000
		#endif
		tbt52_bit_error_compensation(3)=-tbt52_bit_error_compensation(3)
	else
		#if PLATFORM_TYPE_32
			tmp=value(0)*&h1000000
			r=tmp
			tbt52_bit_error_compensation(3)=tbt52_bit_error_compensation(3)+r
		#else
			tbt52_bit_error_compensation(3)=tbt52_bit_error_compensation(3)+value(0)*&h1000000
		#endif
	end if

	si2c_stop()
	while (io.lineget(TBT52_INT_PIN)=LOW)
	wend
end sub

sub param_write()
	dim data(4,4)as byte

	dim v as real
	dim i,j as byte
	dim mantissa,m_tmp as dword

	for i=0 to 3
		mantissa=0
		v=tbt52_bit_error_compensation(i)
		
		if v<0 then
			v=-v
		end if
		for j=0 to 6
			if v>1 then
				mantissa=mantissa*10
				m_tmp=v mod 10
				mantissa=mantissa+m_tmp
				v=v-m_tmp
			else
				mantissa=mantissa*10
			end if
			v=v*10
		next j
		
		data(i,0)=(mantissa and &hFF000000) / &h1000000
		data(i,1)=(mantissa and &hFF0000) / &h10000
		data(i,2)=(mantissa and &hFF00) / &h100
		data(i,3)=mantissa and &hFF

		if tbt52_bit_error_compensation(i)<0 then
			data(i,0)=data(i,0) or &h80
		end if
	next i

	si2c_start()
	si2c_write(&h20)
	si2c_write(&h05)
	for i=0 to 3
		for j= 0 to 3
			si2c_write(data(i,j))
		next j
	next i
	si2c_stop()
	while (io.lineget(TBT52_INT_PIN)=LOW)
	wend
end sub

sub tbt52_compensation_calibrate()
' In here, user sholud gather the +10.0 volts and tibbit 52 first.
' Always need to excute the "tbt52_init()" again after the calibration was done.
' This is because we need to read back the calibration data.
	dim i,hi_byte,lo_byte,config,count,times as byte
	dim tmp as word
	dim f,is_positive,ff as no_yes
	dim rec as real(20)
	dim m_value,r_value,tmp_value as real
	const LSB_mV=0.00030517578125

	times=20
	count=0
	f=NO
	is_positive=NO
	ff=NO
	m_value=0.0
	r_value=0.0
	for i=0 to times-1
		rec(i)=0.0
	next i

busy_wait:
	si2c_start()
	si2c_write(&h20)
	si2c_write(&h01)
	si2c_write(tbt52_channel)
	si2c_stop()
	while (io.lineget(TBT52_INT_PIN)=LOW)
	wend
	si2c_start()
	si2c_write(&h21)
	hi_byte=si2c_read(TRUE)
	lo_byte=si2c_read(TRUE)
	config=si2c_read(FALSE)
	si2c_stop()
	if (config and &h80) then goto busy_wait

	if f=YES then
		tmp=hi_byte*256
		tmp=tmp+lo_byte
	else
		' start a conversion.
		si2c_start()
		si2c_write(&h20)
		si2c_write(&h02)
		si2c_write(tbt52_channel)
		si2c_write(&h9C)	'single mode + 16 bits +  Gain = 1
		si2c_stop()
		while (io.lineget(TBT52_INT_PIN)=LOW)
		wend
		f=YES
		goto busy_wait
	end if

	'
	' conversion is done!
	'DADA RATE								INPUT SIGNAL
	'			NEGATIVE FULL_SCALE		-1LSB		 ZERO		 +1LSB		POSITIVE FULL_SCALE
	'  8 SPS		&H8000				&HFFFF		&H0000		&H0001			&H7FFF
	' 16 SPS		&HC000				&HFFFF		&H0000		&H0001			&H3FFF
	' 32 SPS		&HE000				&HFFFF		&H0000		&H0001			&H1FFF
	'128 SPS		&HF800				&HFFFF		&H0000		&H0001			&H7FF
	'
	if tmp<=&h7FFF then
		is_positive=YES
		tmp_value=tmp*LSB_mV
	else
		tmp=&hFFFF-tmp +1
		tmp_value=-(tmp*LSB_mV)
	end if
	m_value=m_value+tmp_value
	rec(count)=tmp_value
	if count < times-1 then
		f=NO
		count=count+1
		goto busy_wait
	end if

	'now ,we can start to do the calibration
	m_value=m_value/times

	' negative or positive
	if m_value >10.0 then
		ff=YES
		r_value=(m_value-10.0)
	else
		ff=NO
		r_value=(10.0-m_value)
	end if

	r_value=r_value*1000000
	r_value=r_value/32768.0  'tolerance per bit

	if (ff=YES) then
		r_value=-r_value
	end if

	tbt52_bit_error_compensation(tbt52_channel)=r_value
	
	param_write()
end sub

sub tbt52_delay_msecond(value as word)
	dim ax,bx as word
	#if PLATFORM_TYPE_32
		sys.timercountms=0
		while sys.timercountms<value
		wend
	#else
		for ax=0 to value
			for bx=0 to 28
			next bx
		next ax
	#endif
end sub

#if TBT52_DEBUG_PRINT=1
sub tbt52_debug_print(data as string)
	sys.debugprint(TBT52_STAMP+data+TBT52_CR_LF)
end sub
#endif
